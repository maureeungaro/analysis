#!/bin/csh -f

# Note: with SLURM the log files are inside /farm_out/ungaro/

# Availiable options:
#
# reset:   will reset the event count number to 1 (write to .dat file)
# verbose: will display the event information (no ROOTIFICATION)
# root:    will rootify, w/o removing dir
# rootr:   will rootify and remove simulation dir
# clear:   will remove unfinished directories

source /group/clas12/packages/setup.csh
module load clas12/pro

set OPT = $1

# Parameters set by user
# ----------------------

set GCARDSD = /home/ungaro/projects/analysis/farm/gemc/studies/deuteronEffect      # collection of gcards. One job / gcard will be launched
set INPUTD  = /volatile/clas12/ungaro/clas12  # location of evio files (inside each gcard title)
set OUTPUTD = $INPUTD/root                    # output directory
set EXACT   = 20                              # number of expected events
set MINP    = 20                              # minimum number of events required for the sim to be processed
set BANKSM  = "dc"                          # bank to be included in rootification

# End of user parameter
# ---------------------


# making sure evio2root exists
if(`where evio2root` == "") then
	echo evio2root not found, check environment
	exit
endif

# making sure the bank exists
set bankFile = $BANKSM"__bank.txt"
if( ! -f $bankFile) then
	echo $bankFile not found, make sure the bank defs exist
	exit
endif


# title of the jobs to be launched
set titles    = `./functions/getGcardsList $GCARDSD`
echo
echo " > Gcards to be launched from " $GCARDSD " :"
echo " >" $titles
echo

# resetting if requested
if($OPT == "reset") then
	set w = 1
	while ($w <= $#titles)
		set thisJob = $titles[$w]
		\echo Resetting $thisJob
		rm -rf nevents_$thisJob.dat
		rm -rf $INPUTD/root
		\echo 1 > nevents_$thisJob.dat
		@ w += 1
	end
	\echo
	exit
endif


# loop over gcards
set w = 1
while ($w <= $#titles)
	set thisJob     = $titles[$w]
	set thisInputD  = $INPUTD/$thisJob
	set thisOutputD = $OUTPUTD/$thisJob

	mkdir -p $thisOutputD

	set SIMU = 1
	set EVN  = `cat nevents_$thisJob.dat`
	set ADDEVN = 0
	set NEXISTD = `ls $thisInputD  | awk -F'simu_' '{print $2}' | awk -F\/ '{print $1}' | sort -nr | head -1`  # number of existing directories to process
	set NRFILES = `ls $thisOutputD | grep root | wc | awk '{print $1}'`  # number of processed files

	\echo " > -------------------"
	\echo
	\echo " Job: " $thisJob
	\echo
	\echo " Number of available directories: $NEXISTD"
	\echo " Number of processed files in $thisOutputD is $NRFILES"
	\echo " Last event for $thisJob is $EVN"
	\echo
	\echo " > -------------------"



	# this job loop
	while ($SIMU <= $NEXISTD)

		# making sure directory exists
		set thisDir = $thisInputD/simu_$SIMU
		if(`filetest -d  $thisDir` == "1") then
			# removing directory if core is found
			set coreFound = `ls $thisDir | grep "core\." | head -1 | wc | awk '{print $1}'`
			if($coreFound == "1") then
				\echo " > !! Core found! Removing dir $thisDir "
				rm -rf $thisDir
			else
				# no core found - proceed
				# identifying last event
				set LASTE = `grep Event $thisDir/gemc.log | grep "End of Event" | tail -1 | awk -F"End of Event" '{print $2}' | awk '{print $1}'`
				if($LASTE == "") then
					set LASTE = 0
				endif

				if($OPT == "verbose") then
					\echo  "$thisDir has $LASTE good event(s)"
				endif

				# satisfying minimum number of events
				if( $LASTE >= $MINP) then

					# can do rootification
					if($OPT == "root" || $OPT == "rootr") then
					
						# don't do anything if out.ev is not there
						if ( -f $thisDir/out.ev ) then

							\echo " > Last good event for simulation $SIMU is $LASTE. Good. Start Event is $EVN"
							set exc = `evio2root -B="$BANKSM" -INPUTF=$thisDir/out.ev -ADDEVN=$ADDEVN |& grep -i segmentation | awk '{print $1}'`
							#set exc = `evio2root -B="dc ftof htcc" -INPUTF=$thisDir/out.ev -ADDEVN=$ADDEVN |& grep -i segmentation | awk '{print $1}'`
						
							# evio2root failed
							if( (`\echo $exc` != "" || `ls | grep "core\." | wc | awk '{print $1}'` == "1" ) && $OPT == "rootr") then
								\echo "simu_$SIMU gave error >$exc<, or core is found. Deleting directory"
								rm core*
								rm -rf $thisDir
							else
							# evio2root was succesful
								@ EVN += $LASTE
								@ ADDEVN = $EVN 
								@ ADDEVN -= 1
								@ NRFILES += 1
								mv $thisDir/out.root $thisOutputD/$NRFILES.root
								rm -rf nevents_$thisJob.dat ; \echo $EVN >  nevents_$thisJob.dat
								if($OPT == "rootr") then
									\echo " > directory $SIMU is done, removing it"
									rm -rf $thisDir
								else
									\echo " > directory $SIMU is done but will not be removed"
								endif
							# end of successful evio2root
							endif
						else
							echo no $thisDir/out.ev present. Removing dir even if it has $LASTE events.
							rm -rf $thisDir
						endif	

					# end of rootification
					endif

				# number of events was not above minimum limit
				else
					if($OPT == "clear") then
						\echo " > Clearing $thisDir"
						rm -rf  $thisDir
					endif
				endif

			# end of core checking
			endif

		# end of inside available dir
		endif

		@ SIMU += 1
	end

	@ w += 1
end


# copying rootAdd in the proper place if not there already
if ( ! -f $OUTPUTD/rootAdd) then
	echo
	cp rootAdd $OUTPUTD/rootAdd
	echo Copying rootAdd to $OUTPUTD/rootAdd
	echo
	echo To go there:
	echo
	echo cd $OUTPUTD/
	echo
endif


